// Generated by CoffeeScript 1.7.1

/*
This program is distributed under the terms of the GPLv3 license.
Copyright 2012 - 2014 (c) Markus Kohlhase <mail@markus-kohlhase.de>
 */

(function() {
  var combine, doubleSlashComment, sharpComment, singleLineHtmlComment, singleLineSlashStarComment, slashStarComment, slocModule, starSlashComment, startHtmlComment, stopHtmlComment, trippleQuoteComment, trippleSharpComment, whiteSpaceLine;

  whiteSpaceLine = /^\s*$/;

  sharpComment = /^\s*\#/;

  doubleSlashComment = new RegExp(/^\s*\/{2}/);

  trippleSharpComment = new RegExp(RegExp("^\\s*\\#{3}"));

  slashStarComment = new RegExp(/^\s*\/\*+(?!.*\*\/).*$/);

  singleLineSlashStarComment = new RegExp(/^\s*\/\*+.*\*+\/{1}\s*$/);

  starSlashComment = new RegExp(/^.*\*\/{1}\s*$/);

  trippleQuoteComment = new RegExp(/^\s*(\"{3}|\'{3})/);

  combine = function(r1, r2) {
    return new RegExp(r1.toString().slice(1, -1) + '|' + r2.toString().slice(1, -1));
  };

  singleLineHtmlComment = new RegExp(/^\s*<!--.*-->\s*$/);

  startHtmlComment = new RegExp(/^\s*<!--(?!.*-->).*$/);

  stopHtmlComment = new RegExp(/-->\s*$/);

  slocModule = function(code, lang) {
    var bCounter, cCounter, comment, commentLineNumbers, i, l, lines, loc, nloc, nr, nullLineNumbers, sloc, start, startLine, startMultiLineComment, stopMultiLineComment, totalC, x, _i, _j, _len;
    if (typeof code !== "string") {
      throw new TypeError("'code' has to be a string");
    }
    switch (lang) {
      case "coffeescript":
      case "coffee":
      case "python":
      case "py":
        comment = sharpComment;
        break;
      case "javascript":
      case "js":
      case "c":
      case "cc":
      case "java":
      case "php":
      case "php5":
      case "go":
      case "scss":
      case "less":
        comment = combine(doubleSlashComment, singleLineSlashStarComment);
        break;
      case "css":
        comment = singleLineSlashStarComment;
        break;
      case "html":
        comment = singleLineHtmlComment;
        break;
      default:
        comment = doubleSlashComment;
    }
    switch (lang) {
      case "coffeescript":
      case "coffee":
        startMultiLineComment = trippleSharpComment;
        stopMultiLineComment = trippleSharpComment;
        break;
      case "javascript":
      case "js":
      case "c":
      case "cc":
      case "java":
      case "php":
      case "php5":
      case "go":
      case "css":
      case "scss":
      case "less":
        startMultiLineComment = slashStarComment;
        stopMultiLineComment = starSlashComment;
        break;
      case "python":
      case "py":
        startMultiLineComment = trippleQuoteComment;
        stopMultiLineComment = trippleQuoteComment;
        break;
      case "html":
        startMultiLineComment = startHtmlComment;
        stopMultiLineComment = stopHtmlComment;
        break;
      case "hx":
        break;
      default:
        throw new TypeError("File extension '" + lang + "' is not supported");
    }
    commentLineNumbers = [];
    nullLineNumbers = [];
    lines = code.split('\n');
    loc = lines.length;
    nloc = ((function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        l = lines[i];
        if (!(whiteSpaceLine.test(l))) {
          continue;
        }
        nullLineNumbers.push(i);
        _results.push(l);
      }
      return _results;
    })()).length;
    start = false;
    cCounter = 0;
    bCounter = 0;
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      l = lines[i];
      if (start === false && startMultiLineComment.test(l)) {
        start = true;
        startLine = i;
      } else if (start === true && stopMultiLineComment.test(l)) {
        start = false;
        x = i - startLine + 1;
        for (nr = _j = startLine; startLine <= i ? _j <= i : _j >= i; nr = startLine <= i ? ++_j : --_j) {
          commentLineNumbers.push(nr);
        }
        bCounter += x;
      } else if (start === false && comment.test(l)) {
        cCounter++;
        commentLineNumbers.push(i);
      }
    }
    sloc = loc - cCounter - bCounter - nloc;
    totalC = cCounter + bCounter;
    return {
      loc: loc,
      sloc: sloc,
      cloc: totalC,
      scloc: cCounter,
      mcloc: bCounter,
      nloc: nloc
    };
  };

  if ((typeof define !== "undefined" && define !== null ? define.amd : void 0) != null) {
    define(function() {
      return slocModule;
    });
  } else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = slocModule;
  } else if (typeof window !== "undefined" && window !== null) {
    window.sloc = slocModule;
  }

}).call(this);
